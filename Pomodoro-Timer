#include <Adafruit_NeoPixel.h> // Libary for LED-Ring
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

#define LED_PIN D1 // Make sure this PIN is right!
#define BUTTON_RED_PIN D2 // Make sure this PIN is right!
#define BUTTON_BLACK_PIN D3 // Make sure this PIN is right!
#define STRIPSIZE 12

const char *ssid     = "TP-Link_B2C1";
const char *password = "54933088";

//Zeitverschiebung UTC <-> MEZ (Winterzeit) = 3600 Sekunden (1 Stunde)
//Zeitverschiebung UTC <-> MEZ (Sommerzeit) = 7200 Sekunden (2 Stunden)
const long utcOffsetInSeconds = 3600;


char daysOfTheWeek[7][12] = {"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"};


WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);

Adafruit_NeoPixel strip = Adafruit_NeoPixel(STRIPSIZE, LED_PIN, NEO_GRB + NEO_KHZ800);

int phase = 0;

void setup() {
    Serial.begin(115200);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Ich verbinde mich mit dem Internet...");
  }
  
  Serial.println("Ich bin mit dem Internet verbunden!");

  timeClient.begin();
  
  pinMode(BUTTON_RED_PIN, INPUT_PULLUP); // Initialize Red Button
  pinMode(BUTTON_BLACK_PIN, INPUT_PULLUP); 
  strip.begin();
  strip.setBrightness(2);  
  strip.show(); // Initialize all pixels to 'off'
}

void loop() {
  
  //pomodoro timer starts and cycles through the four phases
  if(!digitalRead(BUTTON_RED_PIN) && !digitalRead(BUTTON_BLACK_PIN)) {                
  
    for(phase; phase < 5; phase++ ) {
      
      if (phase == 0) {
        phaseOne();
      }
      else if (phase == 1) {
        phaseTwo();
      }
      else if (phase == 2) {
        phaseThree();
      }
      else if (phase == 3) {
        phaseFour();
      }
      else if (phase == 4) {
        phaseFive();
      }
      //initiate next phase  
  
    }           

  }
    
}
// signaling timer is about to start
void phaseOne() {             
     rainbow (30);
     delay(15);
}

//timer is starting now
void phaseTwo() {            

  for(int i=0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(255, 255, 0));
      delay(120000);
      Serial.println( "here i fail 3");
      strip.show();
  }
  colorFill(255,0,0);
  delay(300000);
   
}

void phaseThree() {

  colorFill(0, 255, 0);
  for(int i=0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(0, 0, 255));     
      delay(120000);
      strip.show();
  
  }
  
}

void phaseFour() {
  
  colorFill(0, 255, 0);
  for(int i=0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(255, 0, 255));
      delay(120000);
      strip.show();

  }
  
}


void phaseFive() {
  
  colorFill(0, 255, 0);
  for(int i=0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(0, 255, 255));
      delay(120000);
      strip.show();
      rainbow (39);   //programm endet hier
      
  }
  
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i*1+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}


void colorFill(int r, int g, int b) {
  for(int i=0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(r, g, b));
      strip.show();
      
  }
}


// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
    return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } 
  else if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } 
  else {
    WheelPos -= 170;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
